<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard1.0;net45</TargetFrameworks>
    <Title>TaskTupleAwaiter</Title>
    <Authors>Joseph Musser,Brian Buvinghausen</Authors>
    <Company>Buvinghausen Solutions</Company>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>1.2.1</Version>
    <Description>Enable using the new Value Tuple structure to write elegant code that allows async methods to be fired in parallel despite having different return types

var (result1, result2) = await (GetStringAsync(), GetGuidAsync());

Based on the work of Joseph Musser https://github.com/jnm2
    </Description>
    <Copyright>Copyright Â© 2018 Brian Buvinghausen</Copyright>
	<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <PackageReleaseNotes>Fix TupleConfiguredTaskAwaitable to wait for all tasks credit to maxbrodin</PackageReleaseNotes>
    <PackageProjectUrl>https://github.com/buvinghausen/TaskTupleAwaiter/blob/master/README.md</PackageProjectUrl>
    <PackageTags>C# 7.0;Value Tuple;Async Await Elegant Code</PackageTags>
    <RepositoryUrl>https://github.com/buvinghausen/TaskTupleAwaiter</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>


  <ItemGroup>
    <None Include="../../LICENSE.txt" Pack="true" PackagePath="$(PackageLicenseFile)"/>
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' != 'netstandard2.0'">
    <PackageReference Include="System.ValueTuple" Version="4.3.0" />
  </ItemGroup>

</Project>
